@using System.Dynamic;
@using DotNetNuke.Web.DDRMenu;
@inherits DotNetNuke.Web.Razor.DotNetNukeWebPage<dynamic>

@functions {
	string NodeActiveCssClass (MenuNode node)
	{
		return (node.Selected || node.Breadcrumb) ? "active" : string.Empty;
	}

	string NodeDisabledCssClass (MenuNode node)
	{
		return !node.Enabled ? "disabled" : string.Empty;
	}

	string NodeCssClasses (MenuNode node)
	{
		return (NodeActiveCssClass (node) + " " + NodeDisabledCssClass (node)).Trim ();
	}

	string subnavItemCssClass ()
	{
		return "col-lg-3 col-md-4 col-sm-6";
	}
}

@helper RenderNodes(IList<MenuNode> nodes) {
    if (nodes.Count > 0) {
        <ul class="navbar-nav">
            @foreach (var node in nodes) {
                if (node.HasChildren()) {
                    <li class="nav-item dropdown">
                        <a href="#@(Model.ControlID)_subnav_@node.TabId" aria-controls="@(Model.ControlID)_subnav_@node.TabId"
							role="button" data-toggle="collapse" aria-expanded="false"
							class="nav-link dropdown-toggle @NodeCssClasses(node)">@node.Text</a>
                    </li>
				} else {
                    <li class="nav-item">
						<a href="@node.Url" class="nav-link @NodeCssClasses(node)">@node.Text</a>
					</li>
                }
            }
        </ul>
		<div class="navbar-nav skin-navbar-subnav">
			@foreach (var node in nodes) {
				if (node.HasChildren ()) {
					@RenderSubnavFor(node)
				}
			}
		</div>
	}
}

@helper RenderSubnavFor(MenuNode parentNode) {
	<div class="collapse row" id="@(Model.ControlID)_subnav_@parentNode.TabId" data-parent="#@Model.ControlID">
		<div class="@subnavItemCssClass()">
			<div class="nav-item skin-subnav-item-parent">
				<a href="@parentNode.Url" class="nav-link @NodeCssClasses(parentNode)"><i class="fas fa-list"></i> @parentNode.Text</a>
			</div>
		</div>
		@foreach (var node in parentNode.Children) {
			<div class="@subnavItemCssClass()">
				@if (node.HasChildren ()) {
					<div class="nav-item dropdown">
						<!-- TODO: Missing a@id -->
						<a href="#" role="button" data-toggle="dropdown"
							aria-expanded="false" aria-haspopup="true"
							class="nav-link dropdown-toggle @NodeCssClasses(node)">@node.Text</a>
						@RenderDropdownFor(node)
					</div>
				}
				else {
					<div class="nav-item">
						<a href="@node.Url" class="nav-link @NodeCssClasses(node)">@node.Text</a>
					</div>
				}
			</div>
		}
	</div>
}

@helper RenderDropdownFor(MenuNode parentNode) {
	<!-- TODO: Missing aria-labelledby a@id -->
	<div class="dropdown-menu">
		<a class="dropdown-item @NodeCssClasses(parentNode)" href="@parentNode.Url"><i class="fas fa-list"></i> @parentNode.Text</a>
		<div class="dropdown-divider"></div>
		@foreach (var node in parentNode.Children) {
    		<a class="dropdown-item @NodeCssClasses(node)" href="@node.Url">@node.Text</a>
		}
	</div>
}

@RenderNodes(Model.Source.root.Children)
