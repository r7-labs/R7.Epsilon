@using System.Dynamic
@using System.Collections.Generic
@using DotNetNuke.Web.DDRMenu
@using R7.Zeta.Components
@using R7.Zeta.Menus
@inherits DotNetNuke.Web.Razor.DotNetNukeWebPage<dynamic>

@functions {
	string FormatUrl (MenuNode node)
	{
		return EpsilonMenuHelper.FormatUrl (node, GetUrlFormat ());
	}

	string Id (MenuNode node, string prefix)
	{
		return Model.ControlID + "_" + prefix + node.TabId;
	}

	string GetUrlFormat ()
	{
		if (((IDictionary<string, object>) Model).ContainsKey ("UrlFormat")) {
			return Model.UrlFormat;
		}
		return EpsilonConfig.Instance.Menu.UrlFormat;
	}

	string GetDirection ()
	{
		if (((IDictionary<string, object>) Model).ContainsKey ("Direction")) {
			return Model.Direction;
		}
		return null;
	}
}

@helper RenderMenu(IList<MenuNode> nodes) {
	if (nodes.Count > 0) {
		<ul id="@Model.ControlID" class='nav nav-pills @(GetDirection() == "Horizontal" ? "" : "flex-column") skin-menu skin-pills-menu'>
			@foreach (var node in nodes) {
				if (node.HasChildren()) {
					<li class='nav-item @(GetDirection() == "Horizontal" ? "dropdown" : "dropright")'>
						<a id='@Id(node, "btnDropdown")' type="button" role="button" href="#" data-toggle="dropdown"
							aria-haspopup="true" aria-expanded="false"
							class="nav-link dropdown-toggle @EpsilonMenuHelper.ForkNodeCssClasses(node)">@node.Text</a>
						@RenderDropdownFor(node)
					</li>
				} else {
					<li class="nav-item">
						<a href="@FormatUrl(node)" class="nav-link @EpsilonMenuHelper.LeafNodeCssClasses(node)">
							@EpsilonMenuHelper.RenderNodeBadge(node)
							@node.Text
						</a>
					</li>
				}
			}
		</ul>
	}
}

@helper RenderDropdownFor(MenuNode parentNode) {
	<div class="dropdown-menu" aria-labelledby='@Id(parentNode, "btnDropdown")'>
		@if (parentNode.Enabled) {
			<a class="h6 dropdown-item skin-menu-parent-item @EpsilonMenuHelper.LeafNodeCssClasses(parentNode)" href="@FormatUrl(parentNode)"
					title='@(EpsilonMenuHelper.GetString("Menu_GoToPage.Text") + "\"" + parentNode.Text + "\"")'>
				@EpsilonMenuHelper.RenderNodeBadge(parentNode)
				@parentNode.Text
			</a>
			<div class="dropdown-divider"></div>
		}
		@foreach (var node in parentNode.Children) {
			<a class="dropdown-item @EpsilonMenuHelper.LeafNodeCssClasses(node)" href="@FormatUrl(node)">
				@EpsilonMenuHelper.RenderNodeBadge(node)
				@node.Text
			</a>
		}
	</div>
}

@RenderMenu(Model.Source.root.Children)
