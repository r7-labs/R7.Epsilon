@using System.Dynamic
@using System.Collections.Generic
@using DotNetNuke.Web.DDRMenu
@using R7.Epsilon.Components
@using R7.Epsilon.Menus
@inherits DotNetNuke.Web.Razor.DotNetNukeWebPage<dynamic>

@functions {
	string FormatUrl (MenuNode node, EpsilonMenuHelper mh)
	{
		return mh.FormatUrl (node, GetUrlFormat ());
	}

	string GetUrlFormat ()
	{
		if (((IDictionary<string, object>) Model).ContainsKey ("UrlFormat")) {
			return Model.UrlFormat;
		}
		return EpsilonConfig.Instance.Menu.UrlFormat;
	}

	string GetDirection ()
	{
		if (((IDictionary<string, object>) Model).ContainsKey ("Direction")) {
			return Model.Direction;
		}
		return null;
	}
}

@helper RenderMenu(IList<MenuNode> nodes, EpsilonMenuHelper mh) {
	if (nodes.Count > 0) {
		<ul id="@Model.ControlID" class='nav nav-pills @(GetDirection() == "Horizontal" ? "" : "flex-column") skin-menu skin-pills-menu'>
			@foreach (var node in nodes) {
				if (node.HasChildren()) {
					<li class='nav-item @(GetDirection() == "Horizontal" ? "dropdown" : "dropright")'>
						<a id='@mh.Id(node, "btnDropdown")' role="button" href="@FormatUrl(node, mh)" data-toggle="dropdown"
							aria-haspopup="true" aria-expanded="false"
							class="nav-link dropdown-toggle @mh.ForkNodeCssClasses(node)">@node.Text</a>
						@RenderDropdownFor(node, mh)
					</li>
				} else {
					<li class="nav-item">
						<a href="@FormatUrl(node, mh)" class="nav-link @mh.LeafNodeCssClasses(node)" data-tabid="@mh.FormatTabId(node)">
							@mh.RenderNodeBadge(node)
							@node.Text
						</a>
					</li>
				}
			}
		</ul>
	}
}

@helper RenderDropdownFor(MenuNode parentNode, EpsilonMenuHelper mh) {
	<div class="dropdown-menu" aria-labelledby='@mh.Id(parentNode, "btnDropdown")'>
		@if (parentNode.Enabled) {
			<a class="h6 dropdown-item skin-chevron-link @mh.LeafNodeCssClasses(parentNode)" data-tabid="@mh.FormatTabId(parentNode)" href="@FormatUrl(parentNode, mh)"
					title='@(mh.GetString("Menu_GoToPage.Text") + "\"" + parentNode.Text + "\"")'>
				@mh.RenderNodeBadge(parentNode)
				@parentNode.Text
			</a>
			<div class="dropdown-divider"></div>
		}
		@foreach (var node in parentNode.Children) {
			<a class="dropdown-item @mh.LeafNodeCssClasses(node)" data-tabid="@mh.FormatTabId(node)" href="@FormatUrl(node, mh)">
				@mh.RenderNodeBadge(node)
				@node.Text
			</a>
		}
	</div>
}

@RenderMenu(Model.Source.root.Children, new EpsilonMenuHelper(Model.ControlID))
