@using System.Globalization
@using System.Dynamic
@using DotNetNuke.Web.DDRMenu
@using R7.Epsilon.Menus
@inherits DotNetNuke.Web.Razor.DotNetNukeWebPage<dynamic>

@helper RenderMenu(IList<MenuNode> nodes, EpsilonMenuHelper mh) {
    if (nodes.Count > 0) {
		<div id="@Model.ControlID" class="row no-gutters">
			<ul class="navbar-nav col-4 col-md-12">
				@foreach (var node in nodes) {
					if (node.HasChildren()) {
						<li class="nav-item dropdown">
							<a role="button" href="@mh.FormatUrl(node)" data-target='#@mh.Id(node, "subMenu")' data-toggle="collapse"
							        aria-controls='@mh.Id(node, "subMenu")' aria-expanded="false"
									class="nav-link dropdown-toggle @mh.ForkNodeCssClasses(node)" data-tabid="@mh.FormatTabId(node)">
								@mh.RenderNodeBadge(node)
								@node.Text
							</a>
						</li>
					} else {
						<li class="nav-item">
							<a href="@mh.FormatUrl(node)" class="nav-link @mh.LeafNodeCssClasses(node)" data-tabid="@mh.FormatTabId(node)">
								@mh.RenderNodeBadge(node)
								@node.Text
							</a>
						</li>
					}
				}
			</ul>
			@foreach (var node in nodes) {
				if (node.HasChildren ()) {
					@RenderSubmenuFor(node, mh)
				}
			}
		</div>
	}
}

@helper RenderSubmenuFor (MenuNode parentNode, EpsilonMenuHelper mh) {
	<div class="navbar-nav skin-submenu col-8 col-md-12 collapse" id='@mh.Id(parentNode, "subMenu")' data-parent="#@Model.ControlID">
		<div class="row no-gutters">
			@if (parentNode.Enabled) {
				<div class="col-12 p-0">
					<div class="nav-item">
						<a href="@mh.FormatUrl(parentNode)" class="h4 nav-link skin-chevron-link @mh.LeafNodeCssClasses(parentNode)" data-tabid="@mh.FormatTabId(parentNode)"
								title='@(mh.GetString("Menu_GoToPage.Text") + "\"" + parentNode.Text + "\"")'>
							@mh.RenderNodeBadge(parentNode)
							@parentNode.Text
						</a>
					</div>
				</div>
			}
			@foreach (var node in parentNode.Children) {
				<div class="col-lg-4 col-md-6 p-0">
					@if (node.HasChildren ()) {
						<div class="nav-item dropdown">
							<a id='@mh.Id(node, "btnDropdown")' role="button" href="@mh.FormatUrl(node)" data-toggle="dropdown"
									aria-haspopup="true" aria-expanded="false"
									class="nav-link dropdown-toggle @mh.ForkNodeCssClasses(node)" data-tabid="@mh.FormatTabId(node)">
								@mh.RenderNodeBadge(node)
								@node.Text
							</a>
							@RenderDropdownFor(node, mh)
						</div>
					}
					else {
						<div class="nav-item">
							<a href="@mh.FormatUrl(node)" class="nav-link @mh.LeafNodeCssClasses(node)" data-tabid="@mh.FormatTabId(node)">
								@mh.RenderNodeBadge(node)
								@node.Text
							</a>
						</div>
					}
				</div>
			}
		</div>
	</div>
}

@helper RenderDropdownFor(MenuNode parentNode, EpsilonMenuHelper mh) {
	<div class="dropdown-menu" aria-labelledby='@mh.Id(parentNode, "btnDropdown")'>
		@if (parentNode.Enabled) {
			<a class="h5 dropdown-item skin-chevron-link @mh.LeafNodeCssClasses(parentNode)" data-tabid="@mh.FormatTabId(parentNode)" href="@mh.FormatUrl(parentNode)"
					title='@(mh.GetString("Menu_GoToPage.Text") + "\"" + parentNode.Text + "\"")'>
				@mh.RenderNodeBadge(parentNode)
				@parentNode.Text
			</a>
			<div class="dropdown-divider"></div>
		}
		@foreach (var node in parentNode.Children) {
			if (node.HasChildren ()) {
				<a role="button" href="@mh.FormatUrl(node)"
						data-toggle="collapse" data-target='#@mh.Id(node, "collapse")'
						aria-expanded="false" aria-controls='@mh.Id(node, "collapse")'
						class="dropdown-item collapse-toggle @mh.ForkNodeCssClasses(node)" data-tabid="@mh.FormatTabId(node)">
					@mh.RenderNodeBadge(node)
					@node.Text
				</a>
				@RenderCollapseFor(node, mh)
			}
			else {
				<a class="dropdown-item @mh.LeafNodeCssClasses(node)" href="@mh.FormatUrl(node)" data-tabid="@mh.FormatTabId(node)">
					@mh.RenderNodeBadge(node)
					@node.Text
				</a>
			}
		}
	</div>
}

@helper RenderCollapseFor(MenuNode parentNode, EpsilonMenuHelper mh) {
	<div id='@mh.Id(parentNode, "collapse")' class="collapse bg-light">
		<div class="dropdown-divider"></div>
		@if (parentNode.Enabled) {
			<a class="h6 dropdown-item skin-chevron-link @mh.ForkNodeCssClasses(parentNode)" data-tabid="@mh.FormatTabId(parentNode)" href="@mh.FormatUrl(parentNode)"
					title='@(mh.GetString("Menu_GoToPage.Text") + "\"" + parentNode.Text + "\"")'>
				@mh.RenderNodeBadge(parentNode)
				@parentNode.Text
			</a>
		}
		@foreach (var node in parentNode.Children) {
			<a class="dropdown-item @mh.LeafNodeCssClasses(node)" data-tabid="@mh.FormatTabId(node)" href="@mh.FormatUrl(node)">
				@mh.RenderNodeBadge(node)
				@node.Text
			</a>
		}
		<div class="dropdown-divider"></div>
	</div>
}

@RenderMenu(Model.Source.root.Children, new EpsilonMenuHelper(Model.ControlID, Model.UrlFormat))
