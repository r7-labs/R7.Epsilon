@using System.Dynamic;
@using DotNetNuke.Web.DDRMenu;
@using DotNetNuke.Services.Localization;
@using DotNetNuke.Entities.Portals;
@using R7.Epsilon.Components;
@inherits DotNetNuke.Web.Razor.DotNetNukeWebPage<dynamic>

@functions {
	string NodeActiveCssClass (MenuNode node)
	{
		return (node.Selected || node.Breadcrumb) ? "active" : string.Empty;
	}

	string NodeDisabledCssClass (MenuNode node)
	{
		return !node.Enabled ? "disabled" : string.Empty;
	}

	string NodeForkCssClasses (MenuNode node)
	{
		return NodeActiveCssClass (node);
	}

	string NodeLeafCssClasses (MenuNode node)
	{
		return (NodeActiveCssClass (node) + " " + NodeDisabledCssClass (node)).Trim ();
	}

	string subnavItemCssClass ()
	{
		return "col-lg-4 col-md-6 p-0";
	}

	string GetString (string resourceKey)
	{
		var resourceFileRoot = "~/Portals/_default/Skins/R7.Epsilon/App_LocalResources/Fake.ascx.resx";
		return Localization.GetString (resourceKey, resourceFileRoot);
	}

	string FormatUrl (MenuNode node)
	{
		var urlFormat = Model.UrlFormat;
		if (string.IsNullOrEmpty (urlFormat)) {
			return node.Url;
		}
		return EpsilonUrlHelper.FormatUrl (urlFormat, node.TabId, PortalSettings.Current.PortalId, HttpContext.Current.Request.QueryString);
	}

	string Id (MenuNode node, string prefix)
	{
		return Model.ControlID + "_" + prefix + node.TabId;
	}
}

@helper RenderNodes(IList<MenuNode> nodes) {
    if (nodes.Count > 0) {
		<div id="@Model.ControlID" class="row no-gutters">
			<ul class="navbar-nav col-6 col-md-12">
				@foreach (var node in nodes) {
					if (node.HasChildren()) {
						<li class="nav-item dropdown">
							<a href='#@Id(node, "subnav")' aria-controls='@Id(node, "subnav")'
								role="button" data-toggle="collapse" aria-expanded="false"
								class="nav-link dropdown-toggle @NodeForkCssClasses(node)">@node.Text</a>
						</li>
					} else {
						<li class="nav-item">
							<a href="@FormatUrl(node)" class="nav-link @NodeLeafCssClasses(node)">@node.Text</a>
						</li>
					}
				}
			</ul>
			@foreach (var node in nodes) {
				if (node.HasChildren ()) {
					@RenderSubnavFor(node)
				}
			}
		</div>
	}
}

@helper RenderSubnavFor(MenuNode parentNode) {
	<div class="navbar-nav skin-navbar-subnav col-6 col-md-12 collapse" id='@Id(parentNode, "subnav")' data-parent="#@Model.ControlID">
		<div class="row no-gutters">
			@if (parentNode.Enabled) {
				<div class="col-12 p-0">
					<div class="nav-item">
						<a href="@FormatUrl(parentNode)" class="h4 nav-link @NodeLeafCssClasses(parentNode)"
								title='@(GetString("Menu_GoToPage.Text") + "\"" + parentNode.Text + "\"")'>
							@parentNode.Text <i class="fas fa-angle-double-right"></i>
						</a>
					</div>
				</div>
			}
			@foreach (var node in parentNode.Children) {
				<div class="@subnavItemCssClass()">
					@if (node.HasChildren ()) {
						<div class="nav-item dropdown">
							<a id='@Id(node, "subnav_dropdown")' type="button" role="button" href="#" data-toggle="dropdown"
								aria-haspopup="true" aria-expanded="false"
								class="nav-link dropdown-toggle @NodeForkCssClasses(node)">@node.Text</a>
							@RenderDropdownFor(node)
						</div>
					}
					else {
						<div class="nav-item">
							<a href="@FormatUrl(node)" class="nav-link @NodeLeafCssClasses(node)">@node.Text</a>
						</div>
					}
				</div>
			}
		</div>
	</div>
}

@helper RenderDropdownFor(MenuNode parentNode) {
	<div class="dropdown-menu" aria-labelledby='@Id(parentNode, "subnav_dropdown")'>
		@if (parentNode.Enabled) {
			<a class="h5 dropdown-item @NodeLeafCssClasses(parentNode) dropdown-item-parent" href="@FormatUrl(parentNode)"
					title='@(GetString("Menu_GoToPage.Text") + "\"" + parentNode.Text + "\"")'>
				@parentNode.Text <i class="fas fa-angle-double-right"></i>
			</a>
			<div class="dropdown-divider"></div>
		}
		@foreach (var node in parentNode.Children) {
			if (node.HasChildren ()) {
				<a type="button" role="button" href="@FormatUrl(node)"
					data-toggle="collapse" data-target='#@Id(node, "collapse")'
					aria-expanded="false" aria-controls='@Id(node, "collapse")'
					class="dropdown-item collapse-toggle @NodeForkCssClasses(node)">@node.Text</a>
				@RenderCollapseFor(node)
			}
			else {
    			<a class="dropdown-item @NodeLeafCssClasses(node)" href="@FormatUrl(node)">@node.Text</a>
			}
		}
	</div>
}

@helper RenderCollapseFor(MenuNode parentNode) {
	<div id='@Id(parentNode, "collapse")' class="collapse bg-light">
		<div class="dropdown-divider"></div>
		@if (parentNode.Enabled) {
			<a class="h6 dropdown-item @NodeForkCssClasses(parentNode)" href="@FormatUrl(parentNode)"
					title='@(GetString("Menu_GoToPage.Text") + "\"" + parentNode.Text + "\"")'>
				@parentNode.Text <i class="fas fa-angle-double-right"></i>
			</a>
		}
		@foreach (var node in parentNode.Children) {
    		<a class="dropdown-item small @NodeLeafCssClasses(node)" href="@FormatUrl(node)">@node.Text</a>
		}
		<div class="dropdown-divider"></div>
	</div>
}

@RenderNodes(Model.Source.root.Children)
