@using System.Dynamic
@using System.Linq
@using System.Collections.Generic
@using DotNetNuke.Web.DDRMenu
@using DotNetNuke.Common
@using DotNetNuke.Entities.Portals
@using R7.Zeta.Menus
@inherits DotNetNuke.Web.Razor.DotNetNukeWebPage<dynamic>

@functions {
	IList<MenuNode> GetBreadcrumbNodes (MenuNode root)
	{
		var node = root;
		var nodes = new List<MenuNode> { node };
		while (!node.Selected && node.HasChildren ()) {
			var breadcrumbNode = node.Children.FirstOrDefault (n => n.Breadcrumb);
			if (breadcrumbNode == null) {
				break;
			}
			nodes.Add (breadcrumbNode);
			node = breadcrumbNode;
		}
		return nodes;
	}

	string FormatUrl (MenuNode node)
	{
		if (string.IsNullOrEmpty (node.Url) && node.TabId == -1) {
			node.TabId = PortalSettings.Current.HomeTabId;
			node.Url = Globals.NavigateURL (PortalSettings.Current.HomeTabId);
		}
		return EpsilonMenuHelper.FormatUrl (node, Model.UrlFormat);
	}

	string Id (MenuNode node, string prefix)
	{
		return Model.ControlID + "_" + prefix + node.TabId;
	}
}

@helper RenderBreadcrumb(MenuNode root) {
	var nodes = GetBreadcrumbNodes (root);
	if (nodes.Count > 0) {
		<nav id="@Model.ControlID" class="skin-menu skin-breadcrumb-menu" aria-label='@EpsilonMenuHelper.GetString("DropCrumb_AriaLabel.Text")' itemprop="breadcrumb" itemscope="" itemtype="https://schema.org/breadcrumb">
			<ol class="breadcrumb" itemscope="" itemtype="http://schema.org/BreadcrumbList">
				@foreach (var node in nodes) {
					if (node == root) {
						node.Enabled = true;
					}
					if (node.Selected) {
						<li class="breadcrumb-item @EpsilonMenuHelper.LeafNodeCssClasses(node)" aria-current="page"
								itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem">
							@if (node.HasChildren ()) {
								<span class="dropdown">
									<a id='@Id(node, "btnDropdown")' role="button" href="#" data-toggle="dropdown"
											aria-haspopup="true" aria-expanded="false" itemprop="item"
											class="dropdown-toggle">
										@EpsilonMenuHelper.RenderNodeBadge(node)
										<span itemprop="name">@node.Text</span>
									</a>
									@RenderDropdownFor(node)
								</span>
							}
							else {
								<span itemprop="item">
									<span itemprop="name">@node.Text</span>
								</span>
							}
						</li>
					}
					else {
						<li class="breadcrumb-item @EpsilonMenuHelper.LeafNodeCssClasses(node)"
								itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem">
							@if (node == root) {
								<a href="@FormatUrl(node)" class="border border-primary rounded px-1" title='@EpsilonMenuHelper.GetString("DropCrumb_Home_Tooltip.Text")' itemprop="item">
									@Html.Raw(EpsilonMenuHelper.GetString("DropCrumb_Home.Text"))
									@EpsilonMenuHelper.RenderNodeBadge(node)
									<meta itemprop="name" content="@node.Text" />
								</a>
							}
							else {
								<a href="@FormatUrl(node)" itemprop="item">
									@EpsilonMenuHelper.RenderNodeBadge(node)
									<span itemprop="name">@node.Text</span>
								</a>
							}
						</li>
					}
				}
			</ol>
		</nav>
	}
}

@helper RenderDropdownFor(MenuNode parentNode) {
	<div class="dropdown-menu" aria-labelledby='@Id(parentNode, "btnDropdown")'>
		@foreach (var node in parentNode.Children) {
			if (node.HasChildren ()) {
				<a role="button" href="@FormatUrl(node)"
						data-target='@Id(node, "collapse")' data-toggle="dropdown"
						aria-controls='@Id(node, "collapse")' aria-expanded="false"
						class="dropdown-item collapse-toggle @EpsilonMenuHelper.ForkNodeCssClasses(node)">
					@EpsilonMenuHelper.RenderNodeBadge(node)
					<span itemprop="name">@node.Text</span>
				</a>
				@RenderCollapseFor(node)
			}
			else {
				<a class="dropdown-item @EpsilonMenuHelper.LeafNodeCssClasses(node)" href="@FormatUrl(node)">
					@EpsilonMenuHelper.RenderNodeBadge(node)
					@node.Text
				</a>
			}
		}
	</div>
}

@helper RenderCollapseFor(MenuNode parentNode) {
	<div id='@Id(parentNode, "collapse")' class="collapse bg-light">
		<div class="dropdown-divider"></div>
		@if (parentNode.Enabled) {
			<a class="h6 dropdown-item skin-chevron-link @EpsilonMenuHelper.ForkNodeCssClasses(parentNode)" href="@FormatUrl(parentNode)"
					title='@(EpsilonMenuHelper.GetString("Menu_GoToPage.Text") + "\"" + parentNode.Text + "\"")'>
				@EpsilonMenuHelper.RenderNodeBadge(parentNode)
				@parentNode.Text
			</a>
		}
		@foreach (var node in parentNode.Children) {
			<a class="dropdown-item @EpsilonMenuHelper.LeafNodeCssClasses(node)" href="@FormatUrl(node)">
				@EpsilonMenuHelper.RenderNodeBadge(node)
				@node.Text
			</a>
		}
		<div class="dropdown-divider"></div>
	</div>
}

@RenderBreadcrumb(Model.Source.root)
