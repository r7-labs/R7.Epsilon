@using System.Dynamic;
@using System.Linq;
@using System.Collections.Generic;
@using DotNetNuke.Web.DDRMenu;
@using DotNetNuke.Common;
@using DotNetNuke.Entities.Portals;
@using DotNetNuke.Services.Localization;
@using R7.Epsilon.Components;
@inherits DotNetNuke.Web.Razor.DotNetNukeWebPage<dynamic>

@functions {
	string NodeActiveCssClass (MenuNode node)
	{
		return (node.Selected) ? "active" : string.Empty;
	}

	string NodeDisabledCssClass (MenuNode node)
	{
		return !node.Enabled ? "disabled" : string.Empty;
	}

	string NodeForkCssClasses (MenuNode node)
	{
		return NodeActiveCssClass (node);
	}

	string NodeLeafCssClasses (MenuNode node)
	{
		return (NodeActiveCssClass (node) + " " + NodeDisabledCssClass (node)).Trim ();
	}

	IList<MenuNode> GetBreadcrumbNodes (MenuNode root)
	{
		var node = root;
		var nodes = new List<MenuNode> { node };
		while (!node.Selected && node.HasChildren ()) {
			var breadcrumbNode = node.Children.FirstOrDefault (n => n.Breadcrumb);
			if (breadcrumbNode == null) {
				break;
			}
			nodes.Add (breadcrumbNode);
			node = breadcrumbNode;
		}
		return nodes;
	}

	string GetString (string resourceKey)
	{
		var resourceFileRoot = "~/Portals/_default/Skins/R7.Epsilon/App_LocalResources/Fake.ascx.resx";
		return Localization.GetString (resourceKey, resourceFileRoot);
	}

	string FormatUrl (MenuNode node)
	{
		if (!node.Enabled) {
			return "#";
		}
		if (string.IsNullOrEmpty (node.Url) && node.TabId == -1) {
			node.TabId = PortalSettings.Current.HomeTabId;
			node.Url = Globals.NavigateURL (PortalSettings.Current.HomeTabId);
		}
		var urlFormat = Model.UrlFormat;
		if (string.IsNullOrEmpty (urlFormat)) {
			return node.Url;
		}
		return EpsilonUrlHelper.FormatUrl (urlFormat, node.TabId, PortalSettings.Current.PortalId, HttpContext.Current.Request.QueryString);
	}

	string Id (MenuNode node, string prefix)
	{
		return Model.ControlID + "_" + prefix + node.TabId;
	}
}

@helper RenderBreadcrumb(MenuNode root) {
	var nodes = GetBreadcrumbNodes (root);
	if (nodes.Count > 0) {
		<nav id="@Model.ControlID" class="skin-breadcrumb-menu" aria-label='@GetString("DropCrumb_AriaLabel.Text")' itemprop="breadcrumb" itemscope="" itemtype="https://schema.org/breadcrumb">
			<ol class="breadcrumb" itemscope="" itemtype="http://schema.org/BreadcrumbList">
				@foreach (var node in nodes) {
					if (node == root) {
						node.Enabled = true;
					}
					if (node.Selected) {
						<li class="breadcrumb-item @NodeLeafCssClasses(node)" aria-current="page"
								itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem">
							@if (node.HasChildren ()) {
								<span class="dropdown">
									<a id='@Id(node, "btnDropdown")' type="button" role="button" href="#" data-toggle="dropdown"
											aria-haspopup="true" aria-expanded="false" itemprop="item"
											class="dropdown-toggle">
										<span itemprop="name">@node.Text</span>
									</a>
									@RenderDropdownFor(node)
								</span>
							}
							else {
								<span itemprop="item">
									<span itemprop="name">@node.Text</span>
								</span>
							}
						</li>
					}
					else {
						<li class="breadcrumb-item @NodeLeafCssClasses(node)"
								itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem">
							@if (node == root) {
								<a href="@FormatUrl(node)" title='@GetString("DropCrumb_Home_Tooltip.Text")' itemprop="item">
									@Html.Raw(GetString("DropCrumb_Home.Text"))
									<meta itemprop="name" content="@node.Text" />
								</a>
							}
							else {
								<a href="@FormatUrl(node)" itemprop="item">
									<span itemprop="name">@node.Text</span>
								</a>
							}
						</li>
					}
				}
			</ol>
		</nav>
	}
}

@helper RenderDropdownFor(MenuNode parentNode) {
	<div class="dropdown-menu" aria-labelledby='@Id(parentNode, "btnDropdown")'>
		@foreach (var node in parentNode.Children) {
			if (node.HasChildren ()) {
				<a type="button" role="button" href="@FormatUrl(node)"
						data-target='@Id(node, "collapse")' data-toggle="dropdown"
						aria-controls='@Id(node, "collapse")' aria-expanded="false"
						class="dropdown-item collapse-toggle @NodeForkCssClasses(node)">
					<span itemprop="name">@node.Text</span>
				</a>
				@RenderCollapseFor(node)
			}
			else {
				<a class="dropdown-item @NodeLeafCssClasses(node)" href="@FormatUrl(node)">@node.Text</a>
			}
		}
	</div>
}

@helper RenderCollapseFor(MenuNode parentNode) {
	<div id='@Id(parentNode, "collapse")' class="collapse bg-light">
		<div class="dropdown-divider"></div>
		@if (parentNode.Enabled) {
			<a class="h6 dropdown-item @NodeForkCssClasses(parentNode)" href="@FormatUrl(parentNode)"
					title='@(GetString("Menu_GoToPage.Text") + "\"" + parentNode.Text + "\"")'>
				@parentNode.Text <i class="fas fa-angle-double-right"></i>
			</a>
		}
		@foreach (var node in parentNode.Children) {
    		<a class="dropdown-item small @NodeLeafCssClasses(node)" href="@FormatUrl(node)">@node.Text</a>
		}
		<div class="dropdown-divider"></div>
	</div>
}

@RenderBreadcrumb(Model.Source.root)
