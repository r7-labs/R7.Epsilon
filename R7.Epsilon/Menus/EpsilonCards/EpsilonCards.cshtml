@using System.Dynamic;
@using System.Collections.Generic;
@using DotNetNuke.Web.DDRMenu;
@using DotNetNuke.Services.Localization;
@using DotNetNuke.Entities.Portals;
@using R7.Epsilon.Components;
@inherits DotNetNuke.Web.Razor.DotNetNukeWebPage<dynamic>

@functions {
	string NodeActiveCssClass (MenuNode node)
	{
		return (node.Selected) ? "active" : string.Empty;
	}

	string NodeDisabledCssClass (MenuNode node)
	{
		return !node.Enabled ? "disabled" : string.Empty;
	}

	string NodeForkCssClasses (MenuNode node)
	{
		return NodeActiveCssClass (node);
	}

	string NodeLeafCssClasses (MenuNode node)
	{
		return (NodeActiveCssClass (node) + " " + NodeDisabledCssClass (node)).Trim ();
	}

	string GetString (string resourceKey)
	{
		var resourceFileRoot = "~/Portals/_default/Skins/R7.Epsilon/App_LocalResources/Fake.ascx.resx";
		return Localization.GetString (resourceKey, resourceFileRoot);
	}

	string FormatUrl (MenuNode node)
	{
		if (!node.Enabled) {
			return "#";
		}
		var urlFormat = Model.UrlFormat;
		if (string.IsNullOrEmpty (urlFormat)) {
			return node.Url;
		}
		return EpsilonUrlHelper.FormatUrl (urlFormat, node.TabId, PortalSettings.Current.PortalId, HttpContext.Current.Request.QueryString);
	}

	string Id (MenuNode node, string prefix)
	{
		return Model.ControlID + "_" + prefix + node.TabId;
	}

	string GetDirection ()
	{
		if (((IDictionary<string, object>) Model).ContainsKey ("Direction")) {
			return Model.Direction;
		}
		return null;
	}

	bool GetShowDescription ()
	{
		if (((IDictionary<string, object>) Model).ContainsKey ("ShowDescription")) {
			return bool.Parse (Model.ShowDescription);
		}
		return false;
	}
}

@helper RenderMenu(IList<MenuNode> nodes) {
    if (nodes.Count > 0) {
		<div id="@Model.ControlID" class="row skin-menu skin-cards-menu">
			@foreach (var node in nodes) {
				<div class="col-lg-4 col-md-6 skin-cards-menu-col">
					<div class="card">
						<div class="card-body">
							@if (node.Enabled) {
								<a class="h5 card-title skin-menu-parent-item @NodeLeafCssClasses(node)" href="@FormatUrl(node)">@node.Text</a>
							}
							else {
								<span class="h5 card-title skin-menu-parent-item @NodeLeafCssClasses(node)">@node.Text</span>
							}
							@if (GetShowDescription ()) {
								<p class="card-text skin-cards-menu-description">@node.Description</p>
							}
							@if (node.HasChildren ()) {
								if (GetShowDescription ()) {
									<hr />
								}
								@RenderListFor(node)
							}
						</div>
					</div>
				</div>
			}
		</div>
	}
}

@helper RenderListFor(MenuNode parentNode) {
	<ul class="card-text skin-cards-menu-submenu">
		@foreach (var node in parentNode.Children) {
			<li class="@NodeLeafCssClasses(node)">
			 	@if (node.Enabled) {
					<a href="@FormatUrl(node)">@node.Text</a>
				}
				else {
					@node.Text
				}
			</li>
		}
	</ul>
}

@RenderMenu(Model.Source.root.Children)
