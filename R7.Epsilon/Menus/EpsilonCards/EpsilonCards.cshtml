@using System.Dynamic
@using System.Collections.Generic
@using DotNetNuke.Web.DDRMenu
@using R7.Epsilon.Components
@using R7.Epsilon.Menus
@inherits DotNetNuke.Web.Razor.DotNetNukeWebPage<dynamic>

@functions {
	string FormatUrl (MenuNode node)
	{
		return EpsilonMenuHelper.FormatUrl (node, GetUrlFormat ());
	}

	string Id (MenuNode node, string prefix)
	{
		return Model.ControlID + "_" + prefix + node.TabId;
	}

	string GetUrlFormat ()
	{
		if (((IDictionary<string, object>) Model).ContainsKey ("UrlFormat")) {
			return Model.UrlFormat;
		}
		return EpsilonConfig.Instance.Menu.UrlFormat;
	}

	bool GetShowDescription ()
	{
		if (((IDictionary<string, object>) Model).ContainsKey ("ShowDescription")) {
			return bool.Parse (Model.ShowDescription);
		}
		return false;
	}
}

@helper RenderMenu(IList<MenuNode> nodes) {
    if (nodes.Count > 0) {
		<div id="@Model.ControlID" class="row skn-menu skn-cards-menu">
			@foreach (var node in nodes) {
				<div class="col-lg-4 col-md-6 skn-cards-menu-col">
					<div class="card">
						<div class="card-body">
							<h5>
								@if (node.Enabled) {
									<a class="card-title skn-menu-parent-item @EpsilonMenuHelper.LeafNodeCssClasses(node)" href="@FormatUrl(node)">
										@EpsilonMenuHelper.RenderNodeBadge(node)
										@node.Text
									</a>
								}
								else {
									<span class="card-title skn-menu-parent-item @EpsilonMenuHelper.LeafNodeCssClasses(node)">
										@EpsilonMenuHelper.RenderNodeBadge(node)
										@node.Text
									</span>
								}
							</h5>
							@if (GetShowDescription ()) {
								<p class="card-text skn-cards-menu-description">@node.Description</p>
							}
							@if (node.HasChildren ()) {
								if (GetShowDescription ()) {
									<hr />
								}
								@RenderListFor(node)
							}
						</div>
					</div>
				</div>
			}
		</div>
	}
}

@helper RenderListFor(MenuNode parentNode) {
	<ul class="card-text skn-cards-menu-submenu">
		@foreach (var node in parentNode.Children) {
			<li>
				@if (node.Enabled) {
					<a class="@EpsilonMenuHelper.LeafNodeCssClasses(node)" href="@FormatUrl(node)">
						@EpsilonMenuHelper.RenderNodeBadge(node)
						@node.Text
					</a>
				}
				else {
					<span class="@EpsilonMenuHelper.LeafNodeCssClasses(node)">
						@EpsilonMenuHelper.RenderNodeBadge(node)
						@node.Text
					</span>
				}
			</li>
		}
	</ul>
}

@RenderMenu(Model.Source.root.Children)
