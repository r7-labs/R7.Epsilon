@using System.Dynamic
@using System.Collections.Generic
@using DotNetNuke.Web.DDRMenu
@using R7.Epsilon.Components
@using R7.Epsilon.Menus
@inherits DotNetNuke.Web.Razor.DotNetNukeWebPage<dynamic>

@functions {
	string FormatUrl (MenuNode node, EpsilonMenuHelper mh)
	{
		return mh.FormatUrl (node, GetUrlFormat ());
	}

	string GetUrlFormat ()
	{
		if (((IDictionary<string, object>) Model).ContainsKey ("UrlFormat")) {
			return Model.UrlFormat;
		}
		return EpsilonConfig.Instance.Menu.UrlFormat;
	}

	bool GetShowDescription ()
	{
		if (((IDictionary<string, object>) Model).ContainsKey ("ShowDescription")) {
			return bool.Parse (Model.ShowDescription);
		}
		return false;
	}
}

@helper RenderMenu(IList<MenuNode> nodes, EpsilonMenuHelper mh) {
    if (nodes.Count > 0) {
		<div id="@Model.ControlID" class="row skin-menu skin-cards-menu">
			@foreach (var node in nodes) {
				<div class="col-lg-4 col-md-6 skin-cards-menu-col">
					<div class="card">
						<div class="card-body">
							<h5>
								@if (node.Enabled) {
									<a class="card-title skin-chevron-link @mh.LeafNodeCssClasses(node)" data-tabid="@mh.FormatTabId(node)" href="@FormatUrl(node, mh)">
										@mh.RenderNodeBadge(node)
										@node.Text
									</a>
								}
								else {
									<span class="card-title skin-chevron-link @mh.LeafNodeCssClasses(node)" data-tabid="@mh.FormatTabId(node)">
										@mh.RenderNodeBadge(node)
										@node.Text
									</span>
								}
							</h5>
							@if (GetShowDescription ()) {
								<p class="card-text skin-cards-menu-description">@node.Description</p>
							}
							@if (node.HasChildren ()) {
								if (GetShowDescription ()) {
									<hr />
								}
								@RenderListFor(node, mh)
							}
						</div>
					</div>
				</div>
			}
		</div>
	}
}

@helper RenderListFor(MenuNode parentNode, EpsilonMenuHelper mh) {
	<ul class="card-text skin-cards-menu-submenu">
		@foreach (var node in parentNode.Children) {
			<li>
				@if (node.Enabled) {
					<a class="@mh.LeafNodeCssClasses(node)" data-tabid="@mh.FormatTabId(node)" href="@FormatUrl(node, mh)">
						@mh.RenderNodeBadge(node)
						@node.Text
					</a>
				}
				else {
					<span class="@mh.LeafNodeCssClasses(node)" data-tabid="@mh.FormatTabId(node)">
						@mh.RenderNodeBadge(node)
						@node.Text
					</span>
				}
			</li>
		}
	</ul>
}

@RenderMenu(Model.Source.root.Children, new EpsilonMenuHelper(Model.ControlID))
